use Mojo::Base -strict;
binmode(STDERR, ':utf8');

use Test::More;
use Mojo::UA::Che;


my $base_url = 'http://mojolicious.org/perldoc/';
my @modules = qw(Mojo::UserAgent Mojo::IOLoop Mojo Test::More DBI);
#~ my $dom_select = '#NAME ~ p';
my $dom_select = 'head title';
my $limit = 1;
my $delay = Mojo::IOLoop->delay;
$delay->on(finish => $delay->begin); #sub {warn "  FINISH!!!"; $delay->begin});
my $che = Mojo::UA::Che->new(proxy_module_has=>{debug=>1,}, debug=>1, cookie_ignore=>1);
#~ $delay->data(ua=>$che->ua);
my @done = ();

=pod
#~ use Mojo::UserAgent;
my $ua = Mojo::UserAgent->new();
$ua->on(start=> sub {
  my ($self, $tx) = @_;
  say STDERR "START TX $tx";
  $tx->{_count} ||= 0;
  #~ $tx->on(request => sub {say STDERR "request is ready and needs to be handled"; 1;});
  $tx->once(finish=> sub {
    my $tx2 = shift;
    say STDERR "FINISH TX", $tx->{_count}++, $tx->success, $tx2->success;
    #~ $tx2->res(Mojo::Message::Response->new);#
    $ua->start($tx2, sub {shift; $tx=shift;})
      if $tx->{_count} < 5;
    #~ $tx2->resume;
  });
  #~ $tx;
  1;
});


$ua->get($base_url, sub {
  my ($ua, $tx) = @_;
  say STDERR 'DONE', $tx->{_count}, $tx->success;
  
});

=cut


sub test {
  #~ my $che = shift;
  #~ say STDERR "DEBUG: ", $che->debug;
  my $total = @modules;
  #~ $delay->data(ua=>\@ua);
  start() for 1..$limit;
  $delay->wait;
  say STDERR 'Module ', $_ for @done;

  is scalar @done, $total, 'proxying good';
  
}

subtest 'Proxying' => \&test ;

#~ pass 'proxying';

#~ @modules = qw(Mojo::UserAgent Mojo::IOLoop Mojo Test::More DBI);
#~ @done = ();

#~ subtest 'Normal' => \&test, Mojo::UA::Che->new(debug=>1, cookie_ignore=>1);

#~ pass 'normal';

sub start {
  #~ my $ua = shift;# || $ua->dequeue;
  my $module = shift() || shift @modules
    || return;
  my $url = $base_url.$module;
  my $end = $delay->begin;
  $che->get( $url => sub {
    $end->();
    my ($ua, $tx) = @_;
    my $res = $che->process_tx($tx,);
    say STDERR "DONE ", $tx->req->url, "\t $res";
    push @done, process_res($res);
    start();
    });
}

sub process_res {
  my $res = shift;
  return $res
    unless ref $res;
  $res->dom->at($dom_select)->text;
  
}

done_testing();

